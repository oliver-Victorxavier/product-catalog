version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: product-catalog-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-productcatalog}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      TZ: UTC
    secrets:
      - db_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data 
      - ./init-scripts:/docker-entrypoint-initdb.d 
    networks:
      - product-catalog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d productcatalog"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: product-catalog-app
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-productcatalog}
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD_FILE: /run/secrets/db_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    secrets:
      - db_password
      - jwt_secret 
    ports:
      - "8080:8080"
    depends_on:
      postgres: # Ensures the app only starts after the database is healthy.
        condition: service_healthy
    networks:
      - product-catalog-network
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs # Persists application logs.

  # Optional service for web-based database administration.
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: product-catalog-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/pgadmin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    secrets:
      - pgadmin_password
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - product-catalog-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    # This service will only be started with the command: docker-compose --profile admin up
    profiles:
      - admin

# Named volumes for data persistence.
volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  pgadmin_data:
    driver: local

# Dedicated network for communication between containers.
networks:
  product-catalog-network:
    driver: bridge
    name: product-catalog-network

# Docker Secrets for production
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  pgadmin_password:
    file: ./secrets/pgadmin_password.txt