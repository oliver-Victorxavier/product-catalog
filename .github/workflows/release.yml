name: Release and Docker Build

on:
  push:
    branches: [ main ]
  # Allows the workflow to be run manually from the GitHub UI.
  workflow_dispatch:

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: victorxavie/product-catalog

jobs:
  # First job: creates the release automatically.
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # Permissions required for semantic-release to create tags and releases.
    permissions:
      contents: write
      issues: write
      pull-requests: write
    # Defines outputs that can be used by other jobs.
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      # 1. Clones the repository. fetch-depth: 0 is required for semantic-release to analyze the entire commit history.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Sets up the Node.js environment.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. Installs project dependencies.
      - name: Install dependencies
        run: npm ci

      # 4. Runs semantic-release to automatically create the version, tag, and changelog.
      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  # Second job: builds and publishes the Docker image.
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release # Depends on the 'release' job to complete successfully.
    # Only runs if the 'release' job published a new version.
    if: needs.release.outputs.new-release-published == 'true'
    permissions:
      contents: read
      packages: write # Permission to push packages (Docker images) to GHCR.
    steps:
      # 1. Checks out the repository code.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ needs.release.outputs.new-release-version }}
            type=sha,prefix={{branch}}-

      # Builds and pushes the image to GHCR for multiple platforms (amd64, arm64).
      - name: Build and push Docker image to GHCR
        id: build-ghcr
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker Hub
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ needs.release.outputs.new-release-version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image to Docker Hub
        id: build-dockerhub
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Generates a provenance attestation, a security measure that proves the image's origin.
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-ghcr.outputs.digest }}
          push-to-registry: true

  # Third job: runs a security scan on the created image.
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [release, docker-build] # Depends on the previous jobs.
    if: needs.release.outputs.new-release-published == 'true'
    permissions:
      contents: read
      security-events: write # Permission to upload results to the "Security" tab.
    steps:
      # 1. Runs the Trivy vulnerability scanner on the newly published image.
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new-release-version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      # 2. Uploads the Trivy scan results to the GitHub Security tab.
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Ensures the upload occurs even if the scanner finds vulnerabilities.
        with:
          sarif_file: 'trivy-results.sarif'